{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let MockBackendServerInterceptor = /*#__PURE__*/(() => {\n  class MockBackendServerInterceptor {\n    constructor() {}\n\n    intercept(request, next) {\n      if (request.url.endsWith('/login') && request.method === 'POST') {\n        return of(null).pipe(mergeMap(() => {\n          const testUser = [{\n            username: 'user1',\n            password: 'pass1',\n            fullName: 'John Doe'\n          }, {\n            username: 'user2',\n            password: 'pass2',\n            fullName: 'Adam Smith'\n          }];\n          request = request.clone();\n\n          if (request.body.username === testUser[0].username && request.body.password === testUser[0].password || request.body.username === testUser[1].username && request.body.password === testUser[1].password) {\n            const body = {\n              token: 'eyJhbGciOiJIUzI1NiIsInwefwefMSwiZ3VpZCI6IjQ0MDdmOTNjLWRjM' + 'DEtNDQ2My1hMzhmwefwefLWUxZmJiMWQzMTRmOCIsImV4cCI6MTUxNzU3ODM2' + 'NCwiZW1haWwiOiJuaWVrLmhlZXplbWFuc0Bmcm9udG1lbi5ubCIsImlhdCI6MTUx' + 'NzUwefwef3Mjk2NH0.Ykirzr4b7GdsIPGV6PDjCpFHOAqohKazJl5pWJFw',\n              user: {\n                fullName: request.body.username === testUser[0].username ? 'John Doe' : 'Adam Smith',\n                username: request.body.username === testUser[0].username ? 'user1' : 'user2'\n              }\n            }; // if login details are valid return 200 OK with a hypothetical JWT\n\n            return of(new HttpResponse({\n              status: 200,\n              body\n            }));\n          } else {\n            // else return error\n            return throwError('Username or password is wrong!');\n          }\n        })) // Called RxJS Materialize() and Dematerialize() methods\n        // to ensure delay which simulates server response\n        .pipe(materialize(), delay(1000), dematerialize());\n      }\n\n      return next.handle(request);\n    }\n\n  }\n\n  MockBackendServerInterceptor.ɵfac = function MockBackendServerInterceptor_Factory(t) {\n    return new (t || MockBackendServerInterceptor)();\n  };\n\n  MockBackendServerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MockBackendServerInterceptor,\n    factory: MockBackendServerInterceptor.ɵfac\n  });\n  return MockBackendServerInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}