{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { environment } from \"src/environments/environment\";\nimport { StorageService } from \"./storage.service\";\nimport { LocalStorageItems } from \"../interface/enums.model\";\nimport converter from \"convert-units\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CurrencyExchangeService = /*#__PURE__*/(() => {\n  class CurrencyExchangeService {\n    constructor(http) {\n      this.http = http;\n      this.converterForm = new FormGroup({\n        amountControl: new FormControl(\"\", [Validators.required]),\n        fromControl: new FormControl(\"\", [Validators.required, Validators.minLength(2)]),\n        toControl: new FormControl(\"\", [Validators.required, Validators.minLength(2)])\n      });\n      this.converterUnitForm = new FormGroup({\n        amountControl: new FormControl(\"\", [Validators.required]),\n        fromControl: new FormControl(\"\", [Validators.required, Validators.minLength(1)]),\n        toControl: new FormControl(\"\", [Validators.required, Validators.minLength(1)])\n      });\n      this.periodicHistoryExchangeRates = StorageService.getObject(LocalStorageItems.SavedValues) || [];\n      this.fromCurrencies = [];\n      this.toCurrencies = [];\n      this.isValid = false;\n      this.isUnitValid = false;\n      this.isServiceReferral = false;\n    }\n\n    static toTwoDigits(givenNumber) {\n      return givenNumber > 9 ? `${givenNumber}` : `0${givenNumber}`;\n    }\n\n    getCurrentDate(separator) {\n      const now = new Date();\n      const currentDay = now.getDate();\n      const currentMonth = now.getMonth() + 1;\n      const currentYear = now.getFullYear();\n      this.currentDate = [currentDay, currentMonth, currentYear].map(CurrencyExchangeService.toTwoDigits).join(separator);\n      return this.currentDate;\n    }\n\n    getCurrentTime(separator) {\n      const now = new Date();\n      const currentHour = now.getHours();\n      const currentMinute = now.getMinutes();\n      const currentSecond = now.getSeconds();\n      this.currentTime = [currentHour, currentMinute, currentSecond].map(CurrencyExchangeService.toTwoDigits).join(separator);\n      return this.currentTime;\n    }\n\n    toggleServiceReferral() {\n      return this.isServiceReferral = !this.isServiceReferral;\n    }\n\n    convertUnits(amount, from, to) {\n      return converter(amount).from(from).to(to);\n    }\n\n    getExchangeRates(baseCurrency, toCurrency, amount) {\n      return this.http.get(`${environment.exchangeRatesAPIUrl}/convert?api_key=${environment.apiKey}&base=${baseCurrency}&target=${toCurrency}&base_amount=${amount}`);\n    }\n\n  }\n\n  CurrencyExchangeService.ɵfac = function CurrencyExchangeService_Factory(t) {\n    return new (t || CurrencyExchangeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CurrencyExchangeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CurrencyExchangeService,\n    factory: CurrencyExchangeService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CurrencyExchangeService;\n})();","map":null,"metadata":{},"sourceType":"module"}