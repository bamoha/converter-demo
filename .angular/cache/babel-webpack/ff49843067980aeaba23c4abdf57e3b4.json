{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { StorageService } from \"../../shared/service/storage.service\";\nimport { FormNames, LocalStorageItems, TableColumnNames, TimeIntervalTypes } from \"../../shared/interface/enums.model\";\nimport { unitArrayValues } from \"./unitValues\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/service/currency-exchange.service\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/autocomplete\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/material/progress-spinner\";\n\nfunction UnitConverterComponent_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵlistener(\"onSelectionChange\", function UnitConverterComponent_mat_option_12_Template_mat_option_onSelectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.selectUnitByEnter($event, ctx_r7.fromUnit);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fromItem_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", fromItem_r6.unit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", fromItem_r6.name, \" \");\n  }\n}\n\nfunction UnitConverterComponent_mat_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 19);\n    i0.ɵɵlistener(\"onSelectionChange\", function UnitConverterComponent_mat_option_20_Template_mat_option_onSelectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.selectUnitByEnter($event, ctx_r10.toUnit);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toItem_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", toItem_r9.unit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", toItem_r9.name, \" \");\n  }\n}\n\nfunction UnitConverterComponent_mat_spinner_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction UnitConverterComponent_mat_card_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\");\n    i0.ɵɵelementStart(1, \"section\", 20);\n    i0.ɵɵelementStart(2, \"p\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate5(\" \", ctx_r5.amount, \" \", ctx_r5.fromUnit, \" to \", ctx_r5.toUnit, \" = \", i0.ɵɵpipeBind2(4, 5, ctx_r5.result, \"1.5-5\"), \" \", ctx_r5.toUnit, \" \");\n  }\n}\n\nexport let UnitConverterComponent = /*#__PURE__*/(() => {\n  class UnitConverterComponent {\n    constructor(currencyExchangeService) {\n      this.currencyExchangeService = currencyExchangeService;\n      this.displayedHistoricalColumns = [TableColumnNames.Date, TableColumnNames.ExchangeRate];\n      this.statisticalData = [];\n      this.statisticalDataSource = new MatTableDataSource(this.statisticalData);\n      this.displayedStatisticalColumns = [TableColumnNames.Name, TableColumnNames.Summary];\n      this.selectedDuration = StorageService.getItem(LocalStorageItems.SelectedTimeInterval) || TimeIntervalTypes.AllTime;\n      this.id = new Date().getTime();\n      this.loading = false;\n      this.FIRST_ITEM = 0;\n\n      this.convert = () => {\n        this.loading = true;\n        this.result = this.currencyExchangeService.convertUnits(this.converterForm.controls[FormNames.AmountControl].value, this.converterForm.controls[FormNames.FromControl].value, this.converterForm.controls[FormNames.ToControl].value);\n        this.amount = Math.floor(this.converterForm.get(FormNames.AmountControl).value);\n        this.fromUnit = this.converterForm.controls[FormNames.FromControl].value;\n        this.toUnit = this.converterForm.controls[FormNames.ToControl].value;\n        this.incrementNumberForID();\n        this.currencyExchangeService.periodicHistoryExchangeRates.unshift(this.setPeriodicHistoryElement());\n        this.setExchangeRates();\n        this.loading = false;\n      };\n    }\n\n    ngOnInit() {\n      this.converterForm = this.currencyExchangeService.converterUnitForm;\n      this.unitValues = unitArrayValues;\n    }\n\n    selectUnitByEnter(event, inputName) {\n      if (event.isUserInput) {\n        inputName = event.source.value;\n      }\n    }\n\n    selectUnitByClick(selectedOption, formControlName) {\n      this.converterForm.controls[formControlName].setValue(selectedOption);\n      this.setFormValidity();\n    }\n\n    setFormValidity() {\n      const amountControlValue = this.converterForm.controls[FormNames.AmountControl].value;\n      const fromControlValue = this.converterForm.controls[FormNames.FromControl].value;\n      const toControlValue = this.converterForm.controls[FormNames.ToControl].value;\n      const isAmount = !!amountControlValue;\n      const isTo = !!fromControlValue;\n      const isFrom = !!toControlValue;\n      this.currencyExchangeService.isUnitValid = isAmount && isTo && isFrom;\n    }\n\n    selectWrittenUnit(event, inputName) {\n      const writtenUnit = event.target.value.toUpperCase();\n      const matchedUnit = this.unitValues.filter(currency => currency.name.includes(writtenUnit))[this.FIRST_ITEM] || \"\".toString();\n\n      if (writtenUnit.length === 3 && !!matchedUnit) {\n        this.converterForm.controls[inputName].setValue(matchedUnit);\n      }\n\n      this.setFormValidity();\n    }\n\n    changeExchangeInputValues() {\n      this.converterForm = new FormGroup({\n        amountControl: new FormControl(this.converterForm.get(FormNames.AmountControl).value, [Validators.required]),\n        fromControl: new FormControl(this.converterForm.get(FormNames.ToControl).value, [Validators.required, Validators.minLength(2)]),\n        toControl: new FormControl(this.converterForm.get(FormNames.FromControl).value, [Validators.required, Validators.minLength(2)])\n      });\n      this.convert();\n    }\n\n    incrementNumberForID() {\n      return this.id += 1;\n    }\n\n    setPeriodicHistoryElement() {\n      return {\n        id: this.id,\n        date: `${this.currencyExchangeService.getCurrentDate(\"/\")}\n\\n@${this.currencyExchangeService.getCurrentTime(\":\")}`,\n        fromCurrency: this.fromUnit,\n        toCurrency: this.toUnit,\n        amount: this.amount,\n        result: this.result\n      };\n    }\n\n    setExchangeRates() {\n      return StorageService.setObject(LocalStorageItems.SavedValues, [...this.currencyExchangeService.periodicHistoryExchangeRates]);\n    }\n\n  }\n\n  UnitConverterComponent.ɵfac = function UnitConverterComponent_Factory(t) {\n    return new (t || UnitConverterComponent)(i0.ɵɵdirectiveInject(i1.CurrencyExchangeService));\n  };\n\n  UnitConverterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UnitConverterComponent,\n    selectors: [[\"app-unit-converter\"]],\n    decls: 26,\n    vars: 8,\n    consts: [[1, \"d-flex\", \"align-items-center\", \"justify-content-center\", \"mt-4\"], [1, \"page-title\", \"title--font-size\", \"font--roboto-bold\"], [1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [\"autocomplete\", \"false\", \"novalidate\", \"\", 1, \"conversion-area\", \"row\", \"justify-content-center\", 3, \"formGroup\", \"ngSubmit\", \"keyup.enter\"], [1, \"margin-sm-right\", \"col-12\", \"col-md-12\", \"col-lg-3\", \"col-xl-3\"], [\"matInput\", \"\", \"placeholder\", \"Amount\", \"autocomplete\", \"off\", \"formControlName\", \"amountControl\", \"type\", \"number\", 3, \"input\"], [1, \"margin-sm-left-right\", \"col-12\", \"col-md-12\", \"col-lg-3\", \"col-xl-3\"], [\"placeholder\", \"From\", \"matInput\", \"\", \"name\", \"someUnusualFrom\", \"formControlName\", \"fromControl\", 1, \"pb-0\", \"from-control\", 3, \"matAutocomplete\", \"input\", \"keydown.enter\"], [3, \"optionSelected\"], [\"fromAutoComplete\", \"matAutocomplete\"], [\"class\", \"d-flex justify-content-start\", 3, \"value\", \"onSelectionChange\", 4, \"ngFor\", \"ngForOf\"], [\"mat-icon-button\", \"\", \"mat-raised-button\", \"\", \"type\", \"button\", 3, \"click\"], [1, \"margin-sm-left\", \"col-12\", \"col-md-12\", \"col-lg-3\", \"col-xl-3\"], [\"type\", \"text\", \"placeholder\", \"To\", \"aria-label\", \"To\", \"name\", \"someUnusualTo\", \"matInput\", \"\", \"formControlName\", \"toControl\", 1, \"pb-0\", \"to-control\", 3, \"matAutocomplete\", \"input\", \"keydown.enter\"], [\"toAutoComplete\", \"matAutocomplete\"], [3, \"value\", \"onSelectionChange\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"margin-sm-left\", \"convert-button\", 3, \"disabled\"], [4, \"ngIf\"], [1, \"d-flex\", \"justify-content-start\", 3, \"value\", \"onSelectionChange\"], [3, \"value\", \"onSelectionChange\"], [1, \"mt-4\", \"d-flex\", \"justify-content-center\", \"flex-column\", \"align-items-center\"], [1, \"title--font-size\"]],\n    template: function UnitConverterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"h3\", 1);\n        i0.ɵɵtext(2, \"Unit Converter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"mat-card\");\n        i0.ɵɵelementStart(5, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function UnitConverterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.convert();\n        })(\"keyup.enter\", function UnitConverterComponent_Template_form_keyup_enter_5_listener($event) {\n          return $event.preventDefault();\n        });\n        i0.ɵɵelementStart(6, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(7, \"input\", 5);\n        i0.ɵɵlistener(\"input\", function UnitConverterComponent_Template_input_input_7_listener() {\n          return ctx.setFormValidity();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(9, \"input\", 7);\n        i0.ɵɵlistener(\"input\", function UnitConverterComponent_Template_input_input_9_listener($event) {\n          return ctx.selectWrittenUnit($event, \"fromControl\");\n        })(\"keydown.enter\", function UnitConverterComponent_Template_input_keydown_enter_9_listener($event) {\n          return ctx.selectWrittenUnit($event, \"fromControl\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-autocomplete\", 8, 9);\n        i0.ɵɵlistener(\"optionSelected\", function UnitConverterComponent_Template_mat_autocomplete_optionSelected_10_listener($event) {\n          return ctx.selectUnitByClick($event.option.value, \"fromControl\");\n        });\n        i0.ɵɵtemplate(12, UnitConverterComponent_mat_option_12_Template, 2, 2, \"mat-option\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function UnitConverterComponent_Template_button_click_13_listener() {\n          return ctx.changeExchangeInputValues();\n        });\n        i0.ɵɵelementStart(14, \"mat-icon\");\n        i0.ɵɵtext(15, \"compare_arrows\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-form-field\", 12);\n        i0.ɵɵelementStart(17, \"input\", 13);\n        i0.ɵɵlistener(\"input\", function UnitConverterComponent_Template_input_input_17_listener($event) {\n          return ctx.selectWrittenUnit($event, \"toControl\");\n        })(\"keydown.enter\", function UnitConverterComponent_Template_input_keydown_enter_17_listener($event) {\n          return ctx.selectWrittenUnit($event, \"toControl\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-autocomplete\", 8, 14);\n        i0.ɵɵlistener(\"optionSelected\", function UnitConverterComponent_Template_mat_autocomplete_optionSelected_18_listener($event) {\n          return ctx.selectUnitByClick($event.option.value, \"toControl\");\n        });\n        i0.ɵɵtemplate(20, UnitConverterComponent_mat_option_20_Template, 2, 2, \"mat-option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 16);\n        i0.ɵɵtext(22, \" CONVERT \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 2);\n        i0.ɵɵtemplate(24, UnitConverterComponent_mat_spinner_24_Template, 1, 0, \"mat-spinner\", 17);\n        i0.ɵɵtemplate(25, UnitConverterComponent_mat_card_25_Template, 5, 8, \"mat-card\", 17);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(11);\n\n        const _r2 = i0.ɵɵreference(19);\n\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.converterForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unitValues);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"matAutocomplete\", _r2);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.unitValues);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.currencyExchangeService.isUnitValid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && !ctx.result);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.result);\n      }\n    },\n    directives: [i2.MatCard, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.MatFormField, i5.MatInput, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.FormControlName, i6.MatAutocompleteTrigger, i6.MatAutocomplete, i7.NgForOf, i8.MatButton, i9.MatIcon, i7.NgIf, i10.MatOption, i11.MatSpinner],\n    pipes: [i7.DecimalPipe],\n    styles: [\".page-title[_ngcontent-%COMP%]{margin-bottom:45px}.mat-option-text[_ngcontent-%COMP%]{display:flex!important;justify-content:space-between}.conversion-area[_ngcontent-%COMP%]   .opposite-arrows[_ngcontent-%COMP%]{font-size:24px;padding:0;min-width:45px;max-height:45px}.conversion-area[_ngcontent-%COMP%]   .convert-button[_ngcontent-%COMP%]{font-size:12px;min-width:45px;max-height:45px}.conversion-area[_ngcontent-%COMP%]   .from-control[_ngcontent-%COMP%], .conversion-area[_ngcontent-%COMP%]   .to-control[_ngcontent-%COMP%]{text-transform:uppercase}\"]\n  });\n  return UnitConverterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}